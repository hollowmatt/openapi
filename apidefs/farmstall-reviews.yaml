openapi: 3.0.3
info:
  title: Farmstall API
  version: v1
  description: |-
    
    An API for writing reviews about your favourite (or worst) farm stalls.

    ![Picture of Produce](https://farmstall.designapis.com/img/produce-banner.jpg)

    ---

    # Auth
    To create **Reviews** without being _anonymous_, you need to add a **MyUserToken** 
    to the 'Authorization' header.

    To get a **MyUserToken**:
    1. Create a **User** with [POST /users](#Users/post users)
    1. Get a **MyUserToken** by calling [POST /tokens](#Users/post_tokens)

    # Reviews
    Reviews are the heart of this API. <br/>
    Registered **Users** and anonymous users can both write reviews based on 
    their experience at Farm stalls.
    
  contact:
    name: Joseph Blowhard
    email: joeblow@example.com
    url: https://farmstall.designapis.com
  license:
    url: https://www.apache.org/licenses/LICENSE-2.0.html
    name: Apache 2.0
externalDocs:
  url: https://farmstall.designapis.com
  description: Hosted docs
servers:
- url: https://farmstall.designapis.com/v1
paths: 
  /reviews:
    get:
      description: Get reviews
      parameters:
      - name: maxRating
        description: Filter by a rating ceiling
        in: query
        schema:
          type: number
      responses:
        200:
          description: reviews returned
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                      pattern: '^[0-9a-fA-F\-]{36}$'
                    message:
                      type: string
                    rating:
                      type: integer
                      minimum: 1
                      maximum: 5
                    userId:
                      type: string
                      pattern: '^[0-9a-fA-F\-]{36}$'
                      nullable: true
    post:
      description: Post a review
      security:
        - MyUserToken: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: A great time was had by all
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 5
      responses:
        '201':
          description: Successful creation of a new review
          content:
            application/json:
              schema:
                type: object
                properties: 
                  message:
                    type: string
                    example: A great time was had by all
                  rating:
                    type: integer
                    minimum: 1
                    maximum: 5
                    example: 5
                  userId:
                    type: string
                    nullable: true
                    pattern: '[a-zA-Z-,0-9]{36}'
                    example: f7f680a8-d111-421f-b6b3-493ebf905078
                  uuid:
                    type: string
                    pattern: '[a-zA-Z-,0-9]{36}'
                    example: f7f680a8-d111-421f-b6b3-493ebf905078
  /reviews/{reviewId}:
    get:
      description: Get a single review by id
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: string
          minLength: 36
          maxLength: 36
          pattern: '[a-zA-Z0-9-]+'
          example: 469240a9-8ef9-4a48-ae6e-65d29a01a9d0
      responses:
        '200':
          description: A single review
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: A great time was had by all
                  rating:
                    type: integer
                    minimum: 1
                    maximum: 5
                    example: 5
                  userId:
                    minLength: 36
                    maxLength: 36
                    pattern: '^[a-zA-Z0-9-]+$'
                    example: 469240a9-8ef9-4a48-ae6e-65d29a01a9d0
                  uuid:
                    minLength: 36
                    maxLength: 36
                    pattern: '^[a-zA-Z0-9-]+$'
                    example: 469240a9-8ef9-4a48-ae6e-65d29a01a9d0
  /users:
    post:
      description: Create a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: daywalker
                  minLength: 5
                password:
                  type: string
                  format: password
                  example: Wanderlust!1999
                fullname:
                  type: string
                  example: John Wick
      responses:
        '201':
          description: Successful creation of a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  username: 
                    type: string
                    example: daywalker
                  fullname:
                    type: string
                    example: John Wick
                  uuid:
                    type: string
                    pattern: '[a-zA-Z-,0-9]{36}'
                    example: 9ed0e86c-f798-413e-bddc-65ffad86779a
  /tokens:
    post:
      description: Create a token
      requestBody:
        content:
          application/json:
            schema: 
              type: object
              properties:
                username: 
                  type: string
                  example: daywalker
                password:
                  type: string
                  format: password
                  example: Wanderlust!1999
      responses:
        '201':
          description: Succesful creation of a token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: Es2JxqJVKZ
components:
  securitySchemes:
    MyUserToken:
      type: apiKey
      in: header
      name: Authorization